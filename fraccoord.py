import numpy as np
import datetime

Ba_x, Ba_y, Ba_z = np.array([0.0000000000E+00, 0.0000000000E+00,  1.0587754104E-02])
Ti_x, Ti_y, Ti_z = np.array([5.0000000000E-01, 5.0000000000E-01,  5.2606162012E-01])
O1_x, O1_y, O1_z = np.array([0.0000000000E+00, 5.0000000000E-01,  4.9144046563E-01])
O2_x, O2_y, O2_z = np.array([5.0000000000E-01, 0.0000000000E+00,  4.9144046563E-01])
O3_x, O3_y, O3_z = np.array([5.0000000000E-01, 5.0000000000E-01, -1.9530305493E-02])

b = 6
s = 2
x = (b + s) * 2
atomtype = [1] * (b * 2) + [2] * x + [3] * (x * 3) + [4] * (s * 2)

header=f"""<<<<<<<< # File generated by fraccoord.py by Lan-Tien on {datetime.datetime}
acell    3*1
rprim     {x}.00000000    0.00000000    0.00000000
           0.00000000    1.00000000    0.00000000
           0.00000000    0.00000000    1.00000000
natom    {x*5}
ntypat   4
typat    {" ".join(map(str,atomtype))}
znucl    56 22 8 38
"""


strc="xred"

'''to generate ud structure'''
for i in range(b): #[0,1,2,3,4,5]
    if i == b-1:   # i=5
        strc += f"{((Ba_x+i)/x):20.6f} {Ba_y:10.6f} {0.0:10.6f} # Ba {i} # DW\n"
    else:
        strc += f"{((Ba_x+i)/x):20.6f} {Ba_y:10.6f} {Ba_z:10.6f} # Ba {i}\n" 
for j in range(b): # [7,8,9,10,11,12]:
    i = j + b + s
    if i == b*2:
        strc += f"{((Ba_x+i)/x):20.6f} {Ba_y:10.6f} {0.0:10.6f} # Ba {i} # DW\n"
    else:
        strc += f"{((Ba_x+i)/x):20.6f} {Ba_y:10.6f} {(1-Ba_z):10.6f} # Ba {i}\n" 

for i in range(b-1): #[0,1,2,3,4]:
    strc += f"{((Ti_x+i)/x):20.6f} {Ti_y:10.6f} {Ti_z:10.6f} # Ti {i}\n"
for j in range(b+s): #[5,6,7,8,9,10,11]:
    i = j + b - 1
    strc += f"{((Ti_x+i)/x):20.6f} {Ti_y:10.6f} {(1-Ti_z):10.6f} # Ti {i}\n"
for j in range(s*2): #[12,13]:
    i = j + b*2
    strc += f"{((Ti_x+i)/x):20.6f} {Ti_y:10.6f} {Ti_z:10.6f} # Ti {i}\n"

for i in range(b-1): #[0,1,2,3,4]:
    strc += f"{((O1_x+i)/x):20.6f} {O1_y:10.6f} {O1_z:10.6f} # O1 {i}\n"
    strc += f"{((O2_x+i)/x):20.6f} {O2_y:10.6f} {O2_z:10.6f} # O2 {i}\n"
    strc += f"{((O3_x+i)/x):20.6f} {O3_y:10.6f} {(1+O3_z):10.6f} # O3 {i}\n"
for j in range(b+s): #[5,6,7,8,9,10,11]:
    i = j + b - 1
    if i == b - 1:
        strc += f"{((O1_x+i)/x):20.6f} {O1_y:10.6f} {0.5:10.6f} # O1 {i} # DW\n"
    else:
        strc += f"{((O1_x+i)/x):20.6f} {O1_y:10.6f} {(1-O1_z):10.6f} # O1 {i}\n"
    strc += f"{((O2_x+i)/x):20.6f} {O2_y:10.6f} {(1-O2_z):10.6f} # O2 {i}\n"
    strc += f"{((O3_x+i)/x):20.6f} {O3_y:10.6f} {(-O3_z):10.6f} # O3 {i}\n"
for j in range(s*2): #[12,13]:
    i = j + b*2
    if i == b*2:
        strc += f"{((O1_x+i)/x):20.6f} {O1_y:10.6f} {0.5:10.6f} # O1 {i} # DW\n"
    else:
        strc += f"{((O1_x+i)/x):20.6f} {O1_y:10.6f} {O1_z:10.6f} # O1 {i}\n"
    strc += f"{((O2_x+i)/x):20.6f} {O2_y:10.6f} {O2_z:10.6f} # O2 {i}\n"
    strc += f"{((O3_x+i)/x):20.6f} {O3_y:10.6f} {(1+O3_z):10.6f} # O3 {i}\n"

for j in range(s):
    i = b + j
    strc += f"{((Ba_x+i)/x):20.6f} {Ba_y:10.6f} {(1-Ba_z):10.6f} # Sr {i}\n" 
for j in range(s):
    i = 2*b + j + s
    strc += f"{((Ba_x+i)/x):20.6f} {Ba_y:10.6f} {Ba_z:10.6f} # Sr {i}\n" 

with open(f"B{b}S{s}_ud.frac", "w") as outf:
    outf.write(header)
    outf.write(strc)

'''to generate uu structure'''
#for i in [0,1,2,3,4,5, 7,8,9,10,11,12]:
#    strc += f"{((Ba_x+i)/x):10.6f} {Ba_y:10.6f} {Ba_z:10.6f} # Ba\n" 
#
#for i in range(n):
#    strc += f"{((Ti_x+i)/x):10.6f} {Ti_y:10.6f} {Ti_z:10.6f} # Ti\n"
#
#for i in range(n):
#    strc += f"{((O1_x+i)/x):10.6f} {O1_y:10.6f} {O1_z:10.6f} # O1\n"
#    strc += f"{((O2_x+i)/x):10.6f} {O2_y:10.6f} {O2_z:10.6f} # O2\n"
#    strc += f"{((O3_x+i)/x):10.6f} {O3_y:10.6f} {O3_z:10.6f} # O3\n"
#
#for i in [6,13]:
#    strc += f"{((Ba_x+i)/x):10.6f} {Ba_y:10.6f} {Ba_z:10.6f} # Sr\n" 
#
#with open("B6S1_uu.frac", "w") as outf:
    # outf.write(header)
#    outf.write(strc)
